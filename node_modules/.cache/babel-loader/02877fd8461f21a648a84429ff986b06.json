{"ast":null,"code":"var _jsxFileName = \"/Users/hjsung/Github/Todo-List-react/src/components/TodoItemList.js\";\nimport React, { Component } from 'react';\nimport TodoItem from './TodoItem'; //리스트를 렐더링 하게 될때는, 특히 보여주는 리스트가 동적인 경우엔 함수형이 아닌 클래스형 컴포넌트로 작성해야하는데, 클래스형 컴포넌트로 작성해야 나중에 컴포넌트 성능 최적화를 할 수 있기 때문이다.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class TodoItemList extends Component {\n  //성능 최적화 , 컴포넌트가 리렌더링을 할지 정해줌\n  shouldComponentUpdate(nextProps, nextState) {\n    return this.props.todos !== nextProps.todos;\n  }\n\n  render() {\n    //todos:todo 객체들이 들어있는 배열, onToggle:체크박스를 키고 끄는 함수, onRemove : 아이켐을 삭제시키는 함수                           \n    const {\n      todos,\n      color,\n      onToggle,\n      onRemove\n    } = this.props;\n    console.log(tods.checked);\n    const todoList = todos.map(({\n      id,\n      text,\n      checked\n    }) => /*#__PURE__*/_jsxDEV(TodoItem, {\n      id: id,\n      text: text,\n      checked: checked,\n      color: color,\n      onToggle: onToggle,\n      onRemove: onRemove\n    }, id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 17\n    }, this) //아래와 같은 형태여야 하지만, 함수의 파라미터부분에서 비구조화 할당을 하여 객체 내부의 값들을 따로 레퍼런스를 만들어 주었다.\n    // (todo) => (\n    //     <TodoItem\n    //     {...todo}\n    //     onToggle={onToggle}\n    //     onRemove={onRemove}\n    //     key={todo.id}\n    //     />\n    // )\n    );\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: todoList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/hjsung/Github/Todo-List-react/src/components/TodoItemList.js"],"names":["React","Component","TodoItem","TodoItemList","shouldComponentUpdate","nextProps","nextState","props","todos","render","color","onToggle","onRemove","console","log","tods","checked","todoList","map","id","text"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,YAArB,C,CAEA;;;AACA,eAAe,MAAMC,YAAN,SAA2BF,SAA3B,CAAqC;AAEhD;AACAG,EAAAA,qBAAqB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AACxC,WAAO,KAAKC,KAAL,CAAWC,KAAX,KAAqBH,SAAS,CAACG,KAAtC;AACH;;AAGDC,EAAAA,MAAM,GAAG;AACL;AACA,UAAM;AAACD,MAAAA,KAAD;AAAQE,MAAAA,KAAR;AAAeC,MAAAA,QAAf;AAAyBC,MAAAA;AAAzB,QAAqC,KAAKL,KAAhD;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAYC,IAAI,CAACC,OAAjB;AACA,UAAMC,QAAQ,GAAGT,KAAK,CAACU,GAAN,CACb,CAAC;AAACC,MAAAA,EAAD;AAAKC,MAAAA,IAAL;AAAWJ,MAAAA;AAAX,KAAD,kBACI,QAAC,QAAD;AACC,MAAA,EAAE,EAAEG,EADL;AAEC,MAAA,IAAI,EAAEC,IAFP;AAGC,MAAA,OAAO,EAAEJ,OAHV;AAIC,MAAA,KAAK,EAAEN,KAJR;AAKC,MAAA,QAAQ,EAAEC,QALX;AAMC,MAAA,QAAQ,EAAEC;AANX,OAOMO,EAPN;AAAA;AAAA;AAAA;AAAA,YAFS,CAYb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApBa,KAAjB;AAsBA,wBACI;AAAA,gBACKF;AADL;AAAA;AAAA;AAAA;AAAA,YADJ;AAQH;;AA1C+C","sourcesContent":["import React, { Component } from 'react'\nimport TodoItem from './TodoItem';\n\n//리스트를 렐더링 하게 될때는, 특히 보여주는 리스트가 동적인 경우엔 함수형이 아닌 클래스형 컴포넌트로 작성해야하는데, 클래스형 컴포넌트로 작성해야 나중에 컴포넌트 성능 최적화를 할 수 있기 때문이다.\nexport default class TodoItemList extends Component {\n\n    //성능 최적화 , 컴포넌트가 리렌더링을 할지 정해줌\n    shouldComponentUpdate(nextProps, nextState) {\n        return this.props.todos !== nextProps.todos;\n    }\n    \n\n    render() {                                       \n        //todos:todo 객체들이 들어있는 배열, onToggle:체크박스를 키고 끄는 함수, onRemove : 아이켐을 삭제시키는 함수                           \n        const {todos, color, onToggle, onRemove} = this.props;\n        console.log(tods.checked);\n        const todoList = todos.map(\n            ({id, text, checked}) => (\n                <TodoItem \n                 id={id} \n                 text={text} \n                 checked={checked} \n                 color={color}\n                 onToggle={onToggle}\n                 onRemove={onRemove}\n                 key={id}\n                />\n            )\n            //아래와 같은 형태여야 하지만, 함수의 파라미터부분에서 비구조화 할당을 하여 객체 내부의 값들을 따로 레퍼런스를 만들어 주었다.\n            // (todo) => (\n            //     <TodoItem\n            //     {...todo}\n            //     onToggle={onToggle}\n            //     onRemove={onRemove}\n            //     key={todo.id}\n            //     />\n            // )\n        )\n        return (    \n            <div>\n                {todoList}\n                {/* <TodoItem text=\"안녕\" />\n                <TodoItem text=\"리액트\" />\n                <TodoItem text=\"반가워\" /> */}\n            </div>\n        )\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}